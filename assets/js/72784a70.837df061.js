"use strict";(self.webpackChunkdisnake_guide=self.webpackChunkdisnake_guide||[]).push([[649],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var r=a.createContext({}),c=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(r.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,r=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=c(n),u=i,h=m["".concat(r,".").concat(u)]||m[u]||p[u]||o;return n?a.createElement(h,s(s({ref:t},d),{},{components:n})):a.createElement(h,s({ref:t},d))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=m;var l={};for(var r in t)hasOwnProperty.call(t,r)&&(l[r]=t[r]);l.originalType=e,l.mdxType="string"==typeof e?e:i,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8937:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>s,default:()=>w,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const o={description:"They refer to views, buttons and select menus that can be added to the messages your bot sends."},s="Select Menus",l={unversionedId:"interactions/select-menus",id:"interactions/select-menus",title:"Select Menus",description:"They refer to views, buttons and select menus that can be added to the messages your bot sends.",source:"@site/docs/interactions/select-menus.mdx",sourceDirName:"interactions",slug:"/interactions/select-menus",permalink:"/interactions/select-menus",draft:!1,editUrl:"https://github.com/DisnakeDev/guide/edit/main/guide/docs/interactions/select-menus.mdx",tags:[],version:"current",lastUpdatedBy:"Sem",lastUpdatedAt:1710498079,formattedLastUpdatedAt:"Mar 15, 2024",frontMatter:{description:"They refer to views, buttons and select menus that can be added to the messages your bot sends."},sidebar:"guideSidebar",previous:{title:"Buttons",permalink:"/interactions/buttons"},next:{title:"Modals & Text Inputs",permalink:"/interactions/modals"}},r={},c=[{value:"Example of <code>StringSelect</code>s",id:"example-of-stringselects",level:3},{value:"Other Selects",id:"other-selects",level:3},{value:"Handling View Timeouts",id:"handling-view-timeouts",level:3},{value:"Views vs. low-level components",id:"views-vs-low-level-components",level:3}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)},p=d("DocsLink"),m=d("Tabs"),u=d("TabItem"),h={toc:c};function w(e){let{components:t,...o}=e;return(0,i.kt)("wrapper",(0,a.Z)({},h,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"select-menus"},"Select Menus"),(0,i.kt)("p",null,"Select Menus allow users to interact with your bot through an interactive dropdown component. This component provides selectable options for your users to choose from.\nYou can require users to select a minimum/maximum number of options using ",(0,i.kt)(p,{reference:"disnake.ui.BaseSelect.min_values",mdxType:"DocsLink"},"min_values")," and ",(0,i.kt)(p,{reference:"disnake.ui.BaseSelect.max_values",mdxType:"DocsLink"},"max_values"),"."),(0,i.kt)("p",null,"Select Menus are available as the following types:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(p,{reference:"disnake.ui.StringSelect",mdxType:"DocsLink"},"disnake.ui.StringSelect")," Allows you to input custom string options for users to select from, up to 25"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(p,{reference:"disnake.ui.UserSelect",mdxType:"DocsLink"},"disnake.ui.UserSelect")," User or Member objects as options"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(p,{reference:"disnake.ui.RoleSelect",mdxType:"DocsLink"},"disnake.ui.RoleSelect")," Role objects as options"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)(p,{reference:"disnake.ui.ChannelSelect",mdxType:"DocsLink"},"disnake.ui.ChannelSelect")," Channel objects as options")),(0,i.kt)("p",null,"The options for user, role, and channel select menus are populated by Discord, and currently cannot be limited to a specific subset. See ",(0,i.kt)("a",{parentName:"p",href:"#other-selects"},"below")," for details."),(0,i.kt)("p",null,"This guide will walk you through a pretty basic use-case for a ",(0,i.kt)("inlineCode",{parentName:"p"},"StringSelect")," dropdowns using ",(0,i.kt)("a",{parentName:"p",href:"#example-of-stringselects"},"Views")," and ",(0,i.kt)("a",{parentName:"p",href:"#views-vs-low-level-components"},"low-level components"),".",(0,i.kt)("br",{parentName:"p"}),"\n","If you need more examples, you can always check the examples in the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/DisnakeDev/disnake/tree/master/examples"},"disnake repo"),".\n","\xa0","  "),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"A message can have a maximum of 5 rows of components. Select components each take a single row, therefore you cannot have more than 5 Select components per message")),(0,i.kt)("br",null),(0,i.kt)("p",{align:"center"},(0,i.kt)("img",{src:n(3671).Z,alt:"StringSelect example",width:"60%"})),(0,i.kt)("br",null),(0,i.kt)("h3",{id:"example-of-stringselects"},"Example of ",(0,i.kt)("inlineCode",{parentName:"h3"},"StringSelect"),"s"),(0,i.kt)(m,{mdxType:"Tabs"},(0,i.kt)(u,{value:"subclass",label:"subclassing.py",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import os\n\nimport disnake\nfrom disnake.ext import commands\n\n\n# Defines the StringSelect that contains animals that your users can choose from\nclass AnimalDropdown(disnake.ui.StringSelect):\n    def __init__(self):\n\n        # Define the options that will be displayed inside the dropdown.\n        # You may not have more than 25 options.\n        # There is a `value` keyword that is being omitted, which is useful if\n        # you wish to display a label to the user, but handle a different value\n        # here within the code, like an index number or database id.\n        options = [\n            disnake.SelectOption(label="Dog", description="Dogs are your favorite type of animal"),\n            disnake.SelectOption(label="Cat", description="Cats are your favorite type of animal"),\n            disnake.SelectOption(\n                label="Snake", description="Snakes are your favorite type of animal"\n            ),\n            disnake.SelectOption(\n                label="Gerbil", description="Gerbils are your favorite type of animal"\n            ),\n        ]\n\n        # We will include a placeholder that will be shown until an option has been selected.\n        # The min and max values indicate the minimum and maximum number of options to be selected -\n        # in this example we will only allow one option to be selected.\n        super().__init__(\n            placeholder="Choose an animal",\n            min_values=1,\n            max_values=1,\n            options=options,\n        )\n\n    # This callback is called each time a user has selected an option\n    async def callback(self, inter: disnake.MessageInteraction):\n        # Use the interaction object to respond to the interaction.\n        # `self` refers to this StringSelect object, and the `values`\n        # attribute contains a list of the user\'s selected options.\n        # We only want the first (and in this case, only) one.\n        await inter.response.send_message(f"Your favorite type of animal is: {self.values[0]}")\n\n\n# Now that we have created the Select object with its options and callback, we need to attach it to a\n# View that will be displayed to the user in the command response.\n#\n# Views have a default timeout of 180s, at which the bot will stop listening for those events.\n# You may pass any float here, or `None` if you wish to remove the timeout.\n# Note: If `None` is passed, this view will persist only until the bot is restarted.  If you wish to have persistent views,\n# consider using low-level components or check out the persistent view example:\n# https://github.com/DisnakeDev/disnake/blob/master/examples/views/persistent.py\nclass DropDownView(disnake.ui.View):\n    def __init__(self):\n        # You would pass a new `timeout=` if you wish to alter it, but\n        # we will leave it empty for this example so that it uses the default 180s.\n        super().__init__()\n\n        # Now let\'s add the `StringSelect` object we created above to this view\n        self.add_item(AnimalDropdown())\n\n\n# Finally, we create a basic bot instance with a command that will utilize the created view and dropdown.\nbot = commands.Bot()\n\n\n@bot.listen()\nasync def on_ready():\n    print(f"Logged in as {bot.user} (ID: {bot.user.id})\\n------")\n\n\n@bot.slash_command()\nasync def animals(inter: disnake.ApplicationCommandInteraction):\n    """Sends a message with our dropdown containing the animals"""\n\n    # Create the view with our dropdown object\n    view = DropDownView()\n\n    # Respond to the interaction with a message and our view\n    await inter.response.send_message("What is your favorite type of animal?", view=view)\n\n\nif __name__ == "__main__":\n    bot.run(os.getenv("BOT_TOKEN"))\n'))),(0,i.kt)(u,{value:"decorator",label:"decorator.py",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Instead of subclassing `disnake.ui.StringSelect`, this example shows how to use the\n# `@disnake.ui.string_select` decorator directly inside the View to create the dropdown\n# component.\nclass AnimalView(disnake.ui.View):\n    def __init__(self):\n        super().__init__()\n\n        # If you wish to pass a previously defined sequence of values to this `View` so that\n        # you may have dynamic options, you can do so by defining them within this __init__ method.\n        # `self.animal_callback.options = [...]`\n\n    @disnake.ui.string_select(\n        placeholder="Choose an animal",\n        options=[\n            disnake.SelectOption(label="Dog", description="Dogs are your favorite type of animal"),\n            disnake.SelectOption(label="Cat", description="Cats are your favorite type of animal"),\n            disnake.SelectOption(\n                label="Snake", description="Snakes are your favorite type of animal"\n            ),\n            disnake.SelectOption(\n                label="Gerbil", description="Gerbils are your favorite type of animal"\n            ),\n        ],\n        min_values=1,\n        max_values=1,\n    )\n    async def animal_callback(\n        self, select: disnake.ui.StringSelect, inter: disnake.MessageInteraction\n    ):\n        # The main difference in this callback is that we access the `StringSelect` through the\n        # parameter passed to the callback, vs the subclass example where we access it via `self`\n        await inter.response.send_message(f"You favorite type of animal is: {select.values[0]}")\n')))),(0,i.kt)("h3",{id:"other-selects"},"Other Selects"),(0,i.kt)("p",null,"The three other select components available are constructed and can be used in the same manner.\nThe main difference is that we do not create nor pass any options to these Select objects as Discord will provide these options to the user automatically.\nThe selected option(s) that are available in ",(0,i.kt)("inlineCode",{parentName:"p"},"self.values")," will be the selected object(s) rather than the string values."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"UserSelect.values")," will return a list of ",(0,i.kt)(p,{reference:"disnake.User",mdxType:"DocsLink"},"disnake.User")," or ",(0,i.kt)(p,{reference:"disnake.Member",mdxType:"DocsLink"},"disnake.Member")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"RoleSelect.values")," will return a list of ",(0,i.kt)(p,{reference:"disnake.Role",mdxType:"DocsLink"},"disnake.Role")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ChannelSelect.values")," returns a list of ",(0,i.kt)(p,{reference:"disnake.abc.GuildChannel",mdxType:"DocsLink"},"disnake.abc.GuildChannel"),", ",(0,i.kt)(p,{reference:"disnake.Thread",mdxType:"DocsLink"},"disnake.Thread"),", or ",(0,i.kt)(p,{reference:"disnake.PartialMessageable",mdxType:"DocsLink"},"disnake.PartialMessageable"))),(0,i.kt)("admonition",{type:"note"},(0,i.kt)(p,{reference:"disnake.ui.ChannelSelect",mdxType:"DocsLink"},"disnake.ui.ChannelSelect")," has an extra keyword argument that is not available to the other SelectMenu types.",(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"channel_types")," will allow you to specify the types of channels made available as options (omit to show all available channels):"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"channel_types=[ChannelType.text]")," to display only guild text channels as options"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"channel_types=[ChannelType.voice, ChannelType.stage_voice]")," to display only guild voice and stage channels as options"),(0,i.kt)("li",{parentName:"ul"},"etc.")),(0,i.kt)("p",{parentName:"admonition"},"See ",(0,i.kt)(p,{reference:"disnake.ChannelType",mdxType:"DocsLink"},"disnake.ChannelType")," to see more channel types.")),(0,i.kt)("h3",{id:"handling-view-timeouts"},"Handling View Timeouts"),(0,i.kt)("p",null,"When a View times out, the bot will no longer listen for these events, and your users will receive an error ",(0,i.kt)("inlineCode",{parentName:"p"},"This interaction failed"),"."),(0,i.kt)("p",null,"To avoid this, you have a couple of options when the view times out:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Disable the components within the view so that they are no longer interactive."),(0,i.kt)("li",{parentName:"ol"},"Remove the view altogether, leaving only the original message without components.")),(0,i.kt)("p",null,"For this example we will disable the components using an ",(0,i.kt)("inlineCode",{parentName:"p"},"on_timeout")," method. However, if you wish to remove the View completely you can pass ",(0,i.kt)("inlineCode",{parentName:"p"},"view=None")," (instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"view=self")," like the example below)."),(0,i.kt)("p",null,"We'll continue with the ",(0,i.kt)("inlineCode",{parentName:"p"},"subclassing.py")," example from above, only altering the relevant parts:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="viewtimeout.py"',title:'"viewtimeout.py"'},'...\n\n\nclass DropDownView(disnake.ui.View):\n\n    message: disnake.Message  # adding to typehint the future `message` attribute\n\n    def __init__(self):\n        # this time we will set the timeout to 30.0s\n        super().__init__(timeout=30.0)\n        # now let\'s add the `StringSelect` object we created above to this view\n        self.add_item(AnimalDropdown())\n\n    # To handle this timeout, we\'ll need to override the default `on_timeout` method within the `View``\n    async def on_timeout(self):\n        # Now we will edit the original command response so that it displays the disabled view.\n        # Since `self.children` returns a list of the components attached to this `View` and we want\n        # to prevent the components from remaining interactive after the timeout, we can easily loop\n        # over its components and disable them.\n        for child in self.children:\n            if isinstance(child, (disnake.ui.Button, disnake.ui.BaseSelect)):\n                child.disabled = True\n\n        # Now, edit the message with this updated `View`\n        await self.message.edit(view=self)\n\n\n...\n# The only changes we need to make to handle the updated view is to fetch the original response after,\n# so that the message can be edited later.\n# This is necessary because `interaction.send` methods do not return a message object\n@bot.slash_command()\nasync def animals(inter: disnake.ApplicationCommandInteraction):\n    """Sends a message with our dropdown containing the animals"""\n\n    # Create the view with our dropdown object.\n    view = DropDownView()\n\n    # Respond to the interaction with a message and our view.\n    await inter.response.send_message("What is your favorite type of animal?", view=view)\n\n    # This will add a new `message` attribute to the `DropDownView` that will be edited\n    # once the view has timed out\n    view.message = await inter.original_response()\n\n\n...\n')),(0,i.kt)("h3",{id:"views-vs-low-level-components"},"Views vs. low-level components"),(0,i.kt)("p",null,"As an alternative to using ",(0,i.kt)("inlineCode",{parentName:"p"},"View"),"s, it is possible to use Select Menus as low-level components.\nThese components do not need to be sent as part of a View and can be sent as is."),(0,i.kt)("p",null,"Note that any component being sent in this manner must have a ",(0,i.kt)("inlineCode",{parentName:"p"},"custom_id")," explicitly set. Component interactions are sent to all listeners,\nwhich means the ",(0,i.kt)("inlineCode",{parentName:"p"},"custom_id")," should be unique for each component to be able to identify the component in your code."),(0,i.kt)("p",null,"The main advantage of this is that listeners, by nature, are persistent and will remain fully functional over bot reloads. Listeners are stored in the bot\nstrictly once, and are shared by all components. Because of this, the memory footprint will generally be smaller than that of an equivalent view."),(0,i.kt)("p",null,"The example below will be similar to the above examples, however will be executed as a low level component instead."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="low_level_dropdown.py"',title:'"low_level_dropdown.py"'},'@bot.slash_command()\nasync def animals(inter: disnake.ApplicationCommandInteraction):\n    """Sends a message with our dropdown containing the animals"""\n\n    await inter.response.send_message(\n        "What is your favorite type of animal?",\n        components=[\n            disnake.ui.StringSelect(\n                custom_id="fav_animal",\n                options=["Dog", "Cat", "Snake", "Gerbil"],\n            )\n        ],\n    )\n\n\n# Now we create the listener that will handle the users\'s selection(s), similarly to the callback we used above.\n@bot.listen("on_dropdown")\nasync def fav_animal_listener(inter: disnake.MessageInteraction):\n    # First we should check if the interaction is for the `fav_animal` dropdown we created\n    # and ignore if it isn\'t.\n    if inter.component.custom_id != "fav_animal":\n        return\n\n    # Now we can respond with the user\'s favorite animal\n    await inter.response.send_message(f"Your favorite type of animal is: {inter.values[0]}")\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"These component listeners can be used inside cogs as well. Simply replace ",(0,i.kt)("inlineCode",{parentName:"p"},"@bot.listen()")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"@commands.Cog.listener()")," and\nbe sure to pass ",(0,i.kt)("inlineCode",{parentName:"p"},"self")," as the first argument of the listener function")))}w.isMDXComponent=!0},3671:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/string-select-24417d0aadc0a1f5e05dd9c6c8666ce0.png"}}]);