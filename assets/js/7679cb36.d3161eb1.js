"use strict";(self.webpackChunkdisnake_guide=self.webpackChunkdisnake_guide||[]).push([[883],{3905:(e,n,s)=>{s.d(n,{Zo:()=>m,kt:()=>u});var i=s(7294);function t(e,n,s){return n in e?Object.defineProperty(e,n,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[n]=s,e}function a(e,n){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),s.push.apply(s,i)}return s}function o(e){for(var n=1;n<arguments.length;n++){var s=null!=arguments[n]?arguments[n]:{};n%2?a(Object(s),!0).forEach((function(n){t(e,n,s[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):a(Object(s)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(s,n))}))}return e}function r(e,n){if(null==e)return{};var s,i,t=function(e,n){if(null==e)return{};var s,i,t={},a=Object.keys(e);for(i=0;i<a.length;i++)s=a[i],n.indexOf(s)>=0||(t[s]=e[s]);return t}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)s=a[i],n.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(t[s]=e[s])}return t}var l=i.createContext({}),d=function(e){var n=i.useContext(l),s=n;return e&&(s="function"==typeof e?e(n):o(o({},n),e)),s},m=function(e){var n=d(e.components);return i.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var s=e.components,t=e.mdxType,a=e.originalType,l=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),c=d(s),u=t,h=c["".concat(l,".").concat(u)]||c[u]||p[u]||a;return s?i.createElement(h,o(o({ref:n},m),{},{components:s})):i.createElement(h,o({ref:n},m))}));function u(e,n){var s=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var a=s.length,o=new Array(a);o[0]=c;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r.mdxType="string"==typeof e?e:t,o[1]=r;for(var d=2;d<a;d++)o[d]=s[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,s)}c.displayName="MDXCreateElement"},9506:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>d});var i=s(7462),t=(s(7294),s(3905));const a={description:"Understand and utilize the permission system.",keywords:["disnake","bot","guide","tutorial","permissions","python"]},o="Permissions",r={unversionedId:"popular-topics/permissions",id:"popular-topics/permissions",title:"Permissions",description:"Understand and utilize the permission system.",source:"@site/docs/popular-topics/permissions.mdx",sourceDirName:"popular-topics",slug:"/popular-topics/permissions",permalink:"/popular-topics/permissions",draft:!1,editUrl:"https://github.com/DisnakeDev/guide/edit/main/guide/docs/popular-topics/permissions.mdx",tags:[],version:"current",lastUpdatedBy:"Sem",lastUpdatedAt:1710498079,formattedLastUpdatedAt:"Mar 15, 2024",frontMatter:{description:"Understand and utilize the permission system.",keywords:["disnake","bot","guide","tutorial","permissions","python"]},sidebar:"guideSidebar",previous:{title:"Webhooks",permalink:"/popular-topics/webhooks"},next:{title:"Error Handling",permalink:"/popular-topics/errors"}},l={},d=[{value:"Creating permission objects",id:"creating-permission-objects",level:2},{value:"Manual creation",id:"manual-creation",level:3},{value:"Shorthand methods",id:"shorthand-methods",level:3},{value:"Permission Overwrites",id:"permission-overwrites",level:2},{value:"Using permissions",id:"using-permissions",level:2},{value:"Querying permissions",id:"querying-permissions",level:2},{value:"Context-agnostic",id:"context-agnostic",level:3},{value:"In prefix commands",id:"in-prefix-commands",level:3},{value:"In interactions",id:"in-interactions",level:3},{value:"How permissions are calculated",id:"how-permissions-are-calculated",level:2},{value:"Implicit permissions",id:"implicit-permissions",level:3},{value:"Guild-wide implicit permissions",id:"guild-wide-implicit-permissions",level:4},{value:"Channel-specific implicit permissions",id:"channel-specific-implicit-permissions",level:4},{value:"Operations on permission values",id:"operations-on-permission-values",level:2},{value:"Basic",id:"basic",level:3},{value:"Advanced",id:"advanced",level:3},{value:"Additional",id:"additional",level:3}],m=(p="DocsLink",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,t.kt)("div",e)});var p;const c={toc:d};function u(e){let{components:n,...s}=e;return(0,t.kt)("wrapper",(0,i.Z)({},c,s,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"permissions"},"Permissions"),(0,t.kt)("p",null,"Permissions are one of the key concepts in Discord. As the name implies, they can be used to grant or revoke\naccess to certain actions for certain users based on the roles they have and the channel they're in."),(0,t.kt)("p",null,"In disnake, permissions are controlled via two objects: ",(0,t.kt)(m,{reference:"disnake.Permissions",mdxType:"DocsLink"})," and ",(0,t.kt)(m,{reference:"disnake.PermissionOverwrite",mdxType:"DocsLink"}),", which we'll discuss below."),(0,t.kt)("h2",{id:"creating-permission-objects"},"Creating permission objects"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"Permissions")," can be constructed in two ways: using manual instantiation with allowed/denied permissions specified via\nkeyword arguments, or shorthand methods that create permission objects with predefined groups of permissions."),(0,t.kt)("admonition",{type:"note"},(0,t.kt)("p",{parentName:"admonition"},"There's actually a third option: specifying the raw value, but it's usage is generally discouraged as it's hard\nto understand at a glance what the result will be. Anyway, here's how you do it:"),(0,t.kt)("pre",{parentName:"admonition"},(0,t.kt)("code",{parentName:"pre",className:"language-python"},'permissions = disnake.Permissions(64)  # Represents the "Add Reactions" permission.\n\nassert permissions.value == 64\n'))),(0,t.kt)("h3",{id:"manual-creation"},"Manual creation"),(0,t.kt)("p",null,"Manual creation is usually preferred over shorthand methods due to the flexibility it provides while also still being\nas intuitive as possible, and, as such, is also what you'll usually encounter in other examples and documentation."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'permissions = disnake.Permissions(\n    # Each permission is specified using a keyword argument,\n    # where a value of `True` means that it is allowed, while\n    # `False` means that it is denied.\n    view_audit_log=True,  # This allows the "View Audit Log" permission.\n    # Note that not all permission names are the same as in the\n    # official UI. For example, in the UI guilds are called "Servers",\n    # and, as such, the `manage_guild` kwarg is actually responsible\n    # for controlling the "Manage Server" permission.\n    manage_guild=False,  # Denies the "Manage Server" permission.\n    use_voic_activation=True,  # Allows the "Use Voice Activity" permission.\n    # There are also a few aliases for certain permissions.\n    manage_permissions=True,  # Allows the "Manage Roles" permission.\n    manage_roles=False,  # Denies the "Manage Roles" permission.\n)\n')),(0,t.kt)("admonition",{type:"warning"},(0,t.kt)("p",{parentName:"admonition"},"It is often misunderstood that setting ",(0,t.kt)("inlineCode",{parentName:"p"},"True")," or ",(0,t.kt)("inlineCode",{parentName:"p"},"False")," on a ",(0,t.kt)("inlineCode",{parentName:"p"},"Permissions"),' object will permanently "grant"/"revoke"\nthe permission, but this is not true.'),(0,t.kt)("p",{parentName:"admonition"},(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},"Permissions"),' do not "grant" or "revoke" permission(s) by themselves')," - they only ",(0,t.kt)("em",{parentName:"p"},"represent")," them. Detecting whether\na certain permission will be allowed or denied in the end is not possible unless you go through the full process of\n",(0,t.kt)("a",{parentName:"p",href:"#how-permissions-are-calculated"},"calculating")," permissions (or, more commonly, ",(0,t.kt)("a",{parentName:"p",href:"#querying-permissions"},"querying")," pre-computed\nones).")),(0,t.kt)("p",null,'Note that, quoting from docs, "Arguments are applied in order, which notably also means that supplying a flag and\nits alias will make whatever comes last overwrite the first one". As an example, in the above case the latter\n',(0,t.kt)("inlineCode",{parentName:"p"},"manage_roles=False")," argument will overwrite the former ",(0,t.kt)("inlineCode",{parentName:"p"},"manage_permissions"),", and the resulting object will have\nboth of them set to ",(0,t.kt)("inlineCode",{parentName:"p"},"False")," (since they both represent the same permission)."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"assert not permissions.manage_roles\nassert not permissions.manage_permissions\n")),(0,t.kt)("h3",{id:"shorthand-methods"},"Shorthand methods"),(0,t.kt)("p",null,"Sometimes you may want to allow a group of permissions, like the ones defined in the official UI. Manually creating\nthem can become tedious, and you'll also need to keep them up-to-date with the UI. Luckily, disnake already does that\nfor you via a range of methods defined on the ",(0,t.kt)(m,{reference:"disnake.Permissions",mdxType:"DocsLink"})," class."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'# All permissions grouped under "Advanced" in the official UI.\nadvanced_permissions = disnake.Permissions.advanced()\n# ALL permissions allowed, including advanced ones.\nall_permissions = disnake.Permissions.all()\n')),(0,t.kt)("p",null,"To not duplicate what's already said in ",(0,t.kt)(m,{reference:"disnake.Permissions",mdxType:"DocsLink"},"docs"),", we'll only\nlist the available methods here:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)(m,{reference:"disnake.Permissions.advanced",mdxType:"DocsLink"})),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)(m,{reference:"disnake.Permissions.all",mdxType:"DocsLink"})),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)(m,{reference:"disnake.Permissions.all_channel",mdxType:"DocsLink"})),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)(m,{reference:"disnake.Permissions.events",mdxType:"DocsLink"})),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)(m,{reference:"disnake.Permissions.general",mdxType:"DocsLink"})),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)(m,{reference:"disnake.Permissions.membership",mdxType:"DocsLink"})),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)(m,{reference:"disnake.Permissions.none",mdxType:"DocsLink"})),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)(m,{reference:"disnake.Permissions.private_channel",mdxType:"DocsLink"})),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)(m,{reference:"disnake.Permissions.stage",mdxType:"DocsLink"})),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)(m,{reference:"disnake.Permissions.stage_moderator",mdxType:"DocsLink"})),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)(m,{reference:"disnake.Permissions.text",mdxType:"DocsLink"})),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)(m,{reference:"disnake.Permissions.voice",mdxType:"DocsLink"}))),(0,t.kt)("h2",{id:"permission-overwrites"},"Permission Overwrites"),(0,t.kt)("p",null,"A ",(0,t.kt)(m,{reference:"disnake.PermissionOverwrite",mdxType:"DocsLink"})," is an override for server-wide permissions (i.e., these granted\nby roles). Permission overwrites are assigned per-channel and to a specific user/role, but, unlike regular ",(0,t.kt)("inlineCode",{parentName:"p"},"Permissions"),"\nobjects, each permission in an overwrite can have three values (intead of two for ",(0,t.kt)("inlineCode",{parentName:"p"},"Permissions"),"): ",(0,t.kt)("inlineCode",{parentName:"p"},"True")," (explicitly allowed),\n",(0,t.kt)("inlineCode",{parentName:"p"},"False")," (explicitly denied) and ",(0,t.kt)("em",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"em"},"None")),' ("untouched", i.e., not overriden). The latter is the default value for permissions\nin permission overwrites.'),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"overwrite = disnake.PermissionOverwrite(\n    add_reactions=True,  # This overrides permission as allowed.\n    view_audit_log=False,  # This overrides permission as denied.\n    manage_guild=None,  # Does not override anything (this is the default behavior).\n)\n\n# disnake allows you to query individual permissions just as easily\n# as with regular `Permissions`.\n\nassert overwrite.add_reactions\nassert not overwrite.view_audit_log\nassert overwrite.manage_guild is None\n\n# Although not being the recommended usage (except for creating copies,\n# as you'll see a bit below), you can also access permissions using\n# `.pair()`, which returns a tuple of two `Permissions` objects, first\n# having the allowed permissions set to `True` and second having the\n# denied ones set to `True`.\n\nallow, deny = overwrite.pair()\nassert allow == disnake.Permissions(add_reactions=True)\nassert deny == disnake.Permissions(view_audit_log=False)\n")),(0,t.kt)("p",null,"You can update overwrites in-place by simply assigning values to attributes or by using\nthe ",(0,t.kt)(m,{reference:"disnake.PermissionOverwrite.update",mdxType:"DocsLink"})," method."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"overwrite.view_audit_log = True\n\nassert overwrite.view_audit_log\n\noverwrite.update(view_audit_log=False)\n\nassert not overwrite.view_audit_log\n")),(0,t.kt)("p",null,"If you need to create a new overwrite object based on an existing one, you can do the following."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"allow, deny = overwrite.pair()\nnew_overwrite = disnake.PermissionOverwrite.from_pair(allow, deny)\n\nnew_overwrite.add_reactions = False\n\nassert not new_overwrite.add_reactions\n")),(0,t.kt)("h2",{id:"using-permissions"},"Using permissions"),(0,t.kt)("p",null,'Creating a "chat moderator" role:'),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'permissions = disnake.Permissions(\n    manage_messages=True,\n    moderate_members=True,\n)\n\nchatmod_role = await guild.create_role(\n    name="Chat Moderator",\n    permissions=permissions,\n    hoist=True,\n)\n')),(0,t.kt)("p",null,"Creating an ",(0,t.kt)("inlineCode",{parentName:"p"},"#only-mods")," ",(0,t.kt)(m,{reference:"disnake.TextChannel",mdxType:"DocsLink"}),":"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'# Allow mods to see the channel\noverwrite = disnake.PermissionOverwrite(view_channel=True)\n# See `TextChannel.edit()` documentation.\nmapping = {chatmod_role: overwrite}\n\nonly_mods_channel = await guild.create_text_channel("only-mods", overwrites=mapping)\n\nassert not only_mods_channel.permissions_for(guild.default_role).view_channel\nassert only_mods_channel.permissions_for(chatmod_role).view_channel\n')),(0,t.kt)("p",null,"A slash command that checks whether the command author can add reactions in the current channel:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'@commands.slash_command(description="Checks whether you can add reactions!")\nasync def can_add_reactions(inter: disnake.ApplicationCommandInteraction) -> None:\n    await inter.send("Sure you can!" if inter.permissions.add_reactions else "Sadly no :(")\n')),(0,t.kt)("h2",{id:"querying-permissions"},"Querying permissions"),(0,t.kt)("p",null,"There are various ways to query permission information, and they also depend on the context you're\nin. This section tries to list all possible methods for getting permission info, grouped by context\nthey can be used in."),(0,t.kt)("h3",{id:"context-agnostic"},"Context-agnostic"),(0,t.kt)("p",null,"If you have an instance of any class implementing ",(0,t.kt)(m,{reference:"disnake.abc.GuildChannel",mdxType:"DocsLink"}),",\nthen the easiest way to query permissions for a member/role is\nthrough ",(0,t.kt)(m,{reference:"disnake.abc.GuildChannel.permissions_for",mdxType:"DocsLink"}),".\nThis also works with ",(0,t.kt)(m,{reference:"disnake.Thread",mdxType:"DocsLink"}),"s.\nIf you need a bit more lower level control, you can also get raw overwrite objects\nusing ",(0,t.kt)(m,{reference:"disnake.abc.GuildChannel.overwrites_for",mdxType:"DocsLink"}),"\nor ",(0,t.kt)(m,{reference:"disnake.abc.GuildChannel.overwrites",mdxType:"DocsLink"}),"."),(0,t.kt)("h3",{id:"in-prefix-commands"},"In prefix commands"),(0,t.kt)("p",null,"There are no direct methods on ",(0,t.kt)(m,{reference:"disnake.ext.commands.Context",mdxType:"DocsLink"})," for querying permission\ninformation, however, you can still access ",(0,t.kt)(m,{reference:"disnake.ext.commands.Context.channel",mdxType:"DocsLink"})," and\ncall above-mentioned methods on it, but be sure to check that it's not a ",(0,t.kt)(m,{reference:"disnake.PartialMessageable",mdxType:"DocsLink"}),"\nas it doesn't have any permissions-related methods on it."),(0,t.kt)("h3",{id:"in-interactions"},"In interactions"),(0,t.kt)("p",null,"When working with interactions (i.e., with application commands or components), there are two main properties\ndefined on ",(0,t.kt)(m,{reference:"disnake.Interaction",mdxType:"DocsLink"}),": ",(0,t.kt)(m,{reference:"disnake.Interaction.permissions",mdxType:"DocsLink"}),"\n(for getting the interaction author's permissions in the current channel) and ",(0,t.kt)(m,{reference:"disnake.Interaction.app_permissions",mdxType:"DocsLink"}),"\n(for getting the bot's permissions)."),(0,t.kt)("h2",{id:"how-permissions-are-calculated"},"How permissions are calculated"),(0,t.kt)("p",null,"Permissions can be a tough thing to understand at first, but understanding how permissions are\napplied can help you better grasp this concept."),(0,t.kt)("p",null,"In case we're calculating permissions for a member, the strategy is as follows:"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"If member is the guild owner, all permissions are granted - no questions asked. Otherwise..")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"First we apply the ",(0,t.kt)("inlineCode",{parentName:"p"},"@everyone")," role's permissions.")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"Then, for each of the member's roles, apply its permissions too.")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},'If at this point the member has the "Administrator" permission, all other permissions are granted automatically\n(the member is a guild-wide administrator, and, as such, is functionally equivalent to the owner except\nthey can\'t delete the guild).')),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"After that, if we're in a channel, the following is additionally done:"),(0,t.kt)("ol",{parentName:"li"},(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"We apply its overwrites in the same order: ",(0,t.kt)("inlineCode",{parentName:"p"},"@everyone")," overwrites,\nrole overwrites and finally member overwrites.")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"Then ",(0,t.kt)("a",{parentName:"p",href:"#channel-specific-implicit-permissions"},"channel-specific implicit permissions")," are handled.")))),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"In the end, we take into account ",(0,t.kt)("a",{parentName:"p",href:"#guild-wide-implicit-permissions"},"guild-wide implicit permissions"),"."))),(0,t.kt)("p",null,"In case of calculating permissions for a role, the strategy is the same as if we were calculating permissions\nfor a member with only that role (and ",(0,t.kt)("inlineCode",{parentName:"p"},"@everyone"),"), except that member overwrites are\nnot taken into account."),(0,t.kt)("admonition",{type:"note"},(0,t.kt)("p",{parentName:"admonition"},"Curious about the implementation? At the time of writing, implementation could be found\n",(0,t.kt)("a",{parentName:"p",href:"https://git.disnake.dev/disnake/blob/a24abf43297215b6fe70e0bc61b2ec1dada84b9f/disnake/abc.py#L651-L808"},"here"),".")),(0,t.kt)("h3",{id:"implicit-permissions"},"Implicit permissions"),(0,t.kt)("p",null,'In Discord, there are some permissions that, when revoked, basically make it impossible to utilize other\ngranted permissions. For example, take a user with two permissions: "View Channel" and\n"Send Messages". If at some point user loses the "View Channel" permission, it wouldn\'t matter whether\nthey can send messages in that channel: they just can\'t see the channel in the UI. disnake\'s permission system\nattempts to handle such cases via "implicit permissions" - permissions that, when granted or, more commonly,\nrevoked, automatically grant (revoke) other permissions as well. A few handled cases are demonstrated below,\nbut note that this is by no means an exhaustive list: quoting from the ',(0,t.kt)("a",{parentName:"p",href:"https://discord.com/developers/docs/topics/permissions#implicit-permissions"},"official Discord documentation"),', "in\nall cases, these are based on logical conclusions about how a user with certain permissions should or should\nnot interact with Discord", and, as such, it\'s hardly possible to accomodate all possibilities.'),(0,t.kt)("h4",{id:"guild-wide-implicit-permissions"},"Guild-wide implicit permissions"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},"Timed out members are spectators.")),(0,t.kt)("p",null,"This rule automatically revokes all permissions for timed out members ",(0,t.kt)("em",{parentName:"p"},"except"),' "View Channel" and\n"Read Message History", which are left ',(0,t.kt)("a",{parentName:"p",href:"#permission-overwrites"},"untouched"),"."),(0,t.kt)("h4",{id:"channel-specific-implicit-permissions"},"Channel-specific implicit permissions"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},"If you can't send a message in a channel, then you can't sent ",(0,t.kt)("em",{parentName:"li"},"any")," message in it.")),(0,t.kt)("p",null,'This rule automatically revokes "Send TTS Messages", "Send Voice Messages", "Mention Everyone", "Embed Links"\nand "Attach Files" permissions, if the member doesn\'t have the "Send Messages" permission.'),(0,t.kt)("ol",{start:2},(0,t.kt)("li",{parentName:"ol"},"If you can't view a channel, they you can't do anything in it.")),(0,t.kt)("p",null,'This rule automatically revokes "All Channel" permissions, as specified by ',(0,t.kt)(m,{reference:"disnake.Permissions.all_channel",mdxType:"DocsLink"}),',\nif the member doesn\'t have the "View Channel" permission.'),(0,t.kt)("ol",{start:3},(0,t.kt)("li",{parentName:"ol"},"If you can't connect to a vocal channel, then you can't interfere with it's participants.")),(0,t.kt)("p",null,'This rule automatically revokes "Voice", "Text" and "Stage" permission groups from the official Discord UI if\nthe member doesn\'t have the "Connect" permission.'),(0,t.kt)("h2",{id:"operations-on-permission-values"},"Operations on permission values"),(0,t.kt)("p",null,"Since disnake v2.6, it is possible to do various operations on permission objects with minimal effort. While\nnot something you'd usually use often, they can come in very handy when it comes to complex permission\nmath you'd have to do manually otherwise."),(0,t.kt)("p",null,"This section is meant as a companion to the ",(0,t.kt)(m,{reference:"disnake.Permissions",mdxType:"DocsLink"},"official reference"),",\nmeaning that ideally you should read both."),(0,t.kt)("p",null,"The following variables will be used throughout in the examples below."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"base = disnake.Permissions(add_reactions=True, manage_guild=True)\nsame = disnake.Permissions(add_reactions=True, manage_guild=True)\nsuperset = disnake.Permissions(add_reactions=True, manage_guild=True, send_messages=True)\nsubset = disnake.Permissions(add_reactions=True)\ndifferent = disnake.Permissions(use_voice_activation=True)\n")),(0,t.kt)("h3",{id:"basic"},"Basic"),(0,t.kt)("p",null,"These are operations that usually require no explanation. In any way, comments will guide you through."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"# Check that two permission object have same permissions set to the same value.\nassert base == same\n# Check that one (base) permission object has at least all of the allowed permissions\n# of the second one allowed too.\nassert base >= same\n# Check that one (base) permission object has all of the allowed permissions\n# of the second one allowed too, plus at least one extra.\nassert base > subset\n# Check that one (base) permission object has at maximum all of the allowed permissions\n# of the second one allowed.\nassert base <= same\n# Check that one (base) permission object has at maximum of the allowed permissions\n# of the second one allowed, minus one or more.\nassert base < superset\n# Check that one (base) permission object has at least one permission allowed\n# that is denied in the second one (and the other way around).\nassert base != different\n")),(0,t.kt)("h3",{id:"advanced"},"Advanced"),(0,t.kt)("p",null,"If you're familar with bit operators in Python, then you'll feel right at home. Otherwise, read\nthe comments to understand what does what."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"# Creates a new Permissions object with all allowed permissions from either one of them.\nassert subset | different == disnake.Permissions(add_reactions=True, use_voice_activation=True)\n# Creates a new Permissions object with only permissions allowed on both.\nassert base & subset == disnake.Permissions(add_reactions=True)\n# Creates a new Permissions object with only permissions allowed on one of base or different,\n# but not both.\nassert base ^ different\n\n# Notably, all of operators above support in-place updates using the `OP=` syntax, like so:\n# `base &= subset`.\n\n# Creates a new Permissions object with all permissions from subset inverted.\nassert not (~subset).add_reactions and (~subset).manage_guild\n# Creates a new Permissions object with all permissions except add_reactions allowed.\nassert not (~disnake.Permissions.add_reactions).add_reactions\n# Creates a new Permissions object with all specified permissions allowed.\nassert disnake.Permissions.add_reactions | disnake.Permissions.manage_guild == base\nassert subset | disnake.Permissions.manage_guild == base\n")),(0,t.kt)("h3",{id:"additional"},"Additional"),(0,t.kt)("p",null,"There's also a few additional operations supported that do not involve operators."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'# Returns the permissions\'s hash. Allows permission objects to\n# be used as dictionary keys.\nhash(base)\n\n# `Permissions` and `PermissionOverwrite` both implement `__iter__()`,\n# and therefore can be used in for loops.\nallowed = []\n\nfor name, value in base:\n    if value:\n        allowed.append(name)\n\nassert allowed == ["add_reactions", "manage_guild"]\n')))}u.isMDXComponent=!0}}]);